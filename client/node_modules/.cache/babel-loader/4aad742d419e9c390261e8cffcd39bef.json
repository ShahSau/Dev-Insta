{"ast":null,"code":"import _toConsumableArray from\"/Users/shahriar/Downloads/Dev_Insta-master/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/shahriar/Downloads/Dev_Insta-master/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{GET_POSTS,POST_ERROR,UPDATE_LIKES,DELETE_POST,ADD_POST,GET_POST,ADD_COMMENT,REMOVE_COMMENT}from'../actions/types';var initialState={posts:[],post:null,loading:true,error:{}};function postReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;var type=action.type,payload=action.payload;switch(type){case GET_POSTS:return _objectSpread(_objectSpread({},state),{},{posts:payload,loading:false});case GET_POST:return _objectSpread(_objectSpread({},state),{},{post:payload,loading:false});case ADD_POST:return _objectSpread(_objectSpread({},state),{},{posts:[payload].concat(_toConsumableArray(state.posts)),loading:false});case DELETE_POST:return _objectSpread(_objectSpread({},state),{},{posts:state.posts.filter(function(post){return post._id!==payload;}),loading:false});case POST_ERROR:return _objectSpread(_objectSpread({},state),{},{error:payload,loading:false});case UPDATE_LIKES:return _objectSpread(_objectSpread({},state),{},{posts:state.posts.map(function(post){return post._id===payload.id?_objectSpread(_objectSpread({},post),{},{likes:payload.likes}):post;}),loading:false});case ADD_COMMENT:return _objectSpread(_objectSpread({},state),{},{post:_objectSpread(_objectSpread({},state.post),{},{comments:payload}),loading:false});case REMOVE_COMMENT:return _objectSpread(_objectSpread({},state),{},{post:_objectSpread(_objectSpread({},state.post),{},{comments:state.post.comments.filter(function(comment){return comment._id!==payload;})}),loading:false});default:return state;}}export default postReducer;","map":{"version":3,"sources":["/Users/shahriar/Downloads/Dev_Insta-master/client/src/reducers/post.js"],"names":["GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","posts","post","loading","error","postReducer","state","action","type","payload","filter","_id","map","id","likes","comments","comment"],"mappings":"+QAAA,OACIA,SADJ,CAEIC,UAFJ,CAGIC,YAHJ,CAIIC,WAJJ,CAKIC,QALJ,CAMIC,QANJ,CAOIC,WAPJ,CAQIC,cARJ,KASS,kBATT,CAWE,GAAMC,CAAAA,YAAY,CAAG,CACnBC,KAAK,CAAE,EADY,CAEnBC,IAAI,CAAE,IAFa,CAGnBC,OAAO,CAAE,IAHU,CAInBC,KAAK,CAAE,EAJY,CAArB,CAOA,QAASC,CAAAA,WAAT,EAAmD,IAA9BC,CAAAA,KAA8B,2DAAtBN,YAAsB,IAARO,CAAAA,MAAQ,2CACjD,GAAQC,CAAAA,IAAR,CAA0BD,MAA1B,CAAQC,IAAR,CAAcC,OAAd,CAA0BF,MAA1B,CAAcE,OAAd,CAEA,OAAQD,IAAR,EACE,IAAKhB,CAAAA,SAAL,CACE,sCACKc,KADL,MAEEL,KAAK,CAAEQ,OAFT,CAGEN,OAAO,CAAE,KAHX,GAKF,IAAKN,CAAAA,QAAL,CACE,sCACKS,KADL,MAEEJ,IAAI,CAAEO,OAFR,CAGEN,OAAO,CAAE,KAHX,GAKF,IAAKP,CAAAA,QAAL,CACE,sCACKU,KADL,MAEEL,KAAK,EAAGQ,OAAH,4BAAeH,KAAK,CAACL,KAArB,EAFP,CAGEE,OAAO,CAAE,KAHX,GAKF,IAAKR,CAAAA,WAAL,CACE,sCACKW,KADL,MAEEL,KAAK,CAAEK,KAAK,CAACL,KAAN,CAAYS,MAAZ,CAAmB,SAACR,IAAD,QAAUA,CAAAA,IAAI,CAACS,GAAL,GAAaF,OAAvB,EAAnB,CAFT,CAGEN,OAAO,CAAE,KAHX,GAKF,IAAKV,CAAAA,UAAL,CACE,sCACKa,KADL,MAEEF,KAAK,CAAEK,OAFT,CAGEN,OAAO,CAAE,KAHX,GAKF,IAAKT,CAAAA,YAAL,CACE,sCACKY,KADL,MAEEL,KAAK,CAAEK,KAAK,CAACL,KAAN,CAAYW,GAAZ,CAAgB,SAACV,IAAD,QACrBA,CAAAA,IAAI,CAACS,GAAL,GAAaF,OAAO,CAACI,EAArB,gCAA+BX,IAA/B,MAAqCY,KAAK,CAAEL,OAAO,CAACK,KAApD,GAA8DZ,IADzC,EAAhB,CAFT,CAKEC,OAAO,CAAE,KALX,GAOF,IAAKL,CAAAA,WAAL,CACE,sCACKQ,KADL,MAEEJ,IAAI,gCAAOI,KAAK,CAACJ,IAAb,MAAmBa,QAAQ,CAAEN,OAA7B,EAFN,CAGEN,OAAO,CAAE,KAHX,GAKF,IAAKJ,CAAAA,cAAL,CACE,sCACKO,KADL,MAEEJ,IAAI,gCACCI,KAAK,CAACJ,IADP,MAEFa,QAAQ,CAAET,KAAK,CAACJ,IAAN,CAAWa,QAAX,CAAoBL,MAApB,CACR,SAACM,OAAD,QAAaA,CAAAA,OAAO,CAACL,GAAR,GAAgBF,OAA7B,EADQ,CAFR,EAFN,CAQEN,OAAO,CAAE,KARX,GAUF,QACE,MAAOG,CAAAA,KAAP,CAzDJ,CA2DD,CAED,cAAeD,CAAAA,WAAf","sourcesContent":["import {\n    GET_POSTS,\n    POST_ERROR,\n    UPDATE_LIKES,\n    DELETE_POST,\n    ADD_POST,\n    GET_POST,\n    ADD_COMMENT,\n    REMOVE_COMMENT\n  } from '../actions/types';\n  \n  const initialState = {\n    posts: [],\n    post: null,\n    loading: true,\n    error: {}\n  };\n  \n  function postReducer(state = initialState, action) {\n    const { type, payload } = action;\n  \n    switch (type) {\n      case GET_POSTS:\n        return {\n          ...state,\n          posts: payload,\n          loading: false\n        };\n      case GET_POST:\n        return {\n          ...state,\n          post: payload,\n          loading: false\n        };\n      case ADD_POST:\n        return {\n          ...state,\n          posts: [payload, ...state.posts],\n          loading: false\n        };\n      case DELETE_POST:\n        return {\n          ...state,\n          posts: state.posts.filter((post) => post._id !== payload),\n          loading: false\n        };\n      case POST_ERROR:\n        return {\n          ...state,\n          error: payload,\n          loading: false\n        };\n      case UPDATE_LIKES:\n        return {\n          ...state,\n          posts: state.posts.map((post) =>\n            post._id === payload.id ? { ...post, likes: payload.likes } : post\n          ),\n          loading: false\n        };\n      case ADD_COMMENT:\n        return {\n          ...state,\n          post: { ...state.post, comments: payload },\n          loading: false\n        };\n      case REMOVE_COMMENT:\n        return {\n          ...state,\n          post: {\n            ...state.post,\n            comments: state.post.comments.filter(\n              (comment) => comment._id !== payload\n            )\n          },\n          loading: false\n        };\n      default:\n        return state;\n    }\n  }\n  \n  export default postReducer;"]},"metadata":{},"sourceType":"module"}